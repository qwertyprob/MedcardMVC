@page "/"  
@layout Layout.MainLayout
@inject IMedcardService MedcardContextService
@inject ISearchService MedcardSearch
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IHttpContextAccessor http
@inject HttpClient httpClient

@rendermode InteractiveServer




<header class="header" id="header">
    <div class="logo">
        <a href="/">
            <img src="/img/logo.png" alt="VetAsist">
        </a>
    </div>
    <div class="logo-string">
        <img src="/img/string.png" alt="VetAsist">
    </div>
   
    <button id="Add" type="button" class="btn-input" @onclick="OpenPopup">Добавить</button>
</header>

@if(ShowPopup){

    <EditForm Model="@medcardFormModel" OnValidSubmit="HandleSubmit">
        <div id="popup" class="popup" >
            <div class="popup__box">
                <div class="d-flex position-absolute top-0 end-0 p-3 " style="width: 15%;
  height: 12%;">
                    <button type="button" class="btn-close ms-auto w-50 h-auto" aria-label="Close" style="transform: scale(1.5); width: 20%;
  height: 12%;" @onclick="ClosePopup"></button>
                </div>
                <br />
                <input placeholder="ФИО" type="text" id="name" @bind="@medcardFormModel.OwnerName"/>
                <input placeholder="Номер телефона" type="text" id="phonenumber" @bind="@medcardFormModel.PhoneNumber" />
                <input placeholder="Кличка" type="text" id="nick" @bind="@medcardFormModel.PetName" />
                <input placeholder="Номер чипа" type="text" id="chip" @bind="@medcardFormModel.ChipNumber" />
                <input placeholder="Возраст" type="text" id="age" @bind="@medcardFormModel.Age" />
                <input placeholder="Порода" type="text" id="breed" @bind="@medcardFormModel.Breed" />

                <button class="list__send" type="submit" style="margin-bottom:20px;">@(isEdit ? "Изменить" :"Отправить")</button>
            </div>
        </div>
    </EditForm>
}

<div class="search">
    <div class="search__box search-border">
        <input placeholder="Поиск" class="search__field__input search-border" type="search" id="search" @bind=Search @oninput="OnSearchChanged" />
        <button class="search__field__btn search-border" type="button" @onclick=" ()=> SearchMedcardsAsync(Search) ">Найти</button>
    </div>
</div>

@if (medcardList == null)
{
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}
else if (medcardList.Count == 0)
{
    @if (string.IsNullOrEmpty(ErrorInput) || ErrorInput == "Карточек")
    {
        <h1 style="text-align: center; font-size: 4em; padding: 125px;">
            <span>@(string.IsNullOrEmpty(ErrorInput) ? "Карточек" : ErrorInput)</span> не найдено..
        </h1>
    }
    else
    {
        <h1 style="text-align: center; font-size: 4em; padding-top: 125px;">
            <span style="color:#62c1d5;font-size: 6rem">@(string.IsNullOrEmpty(ErrorInput) ? "Карточек" : ErrorInput)</span> не найдено..
        </h1>
    }
}
 else
{
    <section class="list">
        <div class="list__wrapper shadow">
            <div class="list__line-title" >
                <p class="number">Дата</p>
                <p class="name">ФИО</p>
                <p class="phone">Телефон</p>
                <p class="nick">Кличка</p>
                <p class="chip">Номер чипа</p>
                <p class="age">Возраст</p>
                <p class="breed">Порода</p>
                <p class="heal" id="no-border">Параметры</p>
            </div>
            @foreach (var owner in medcardList)
            {

                <div class="list__container">
                    <div class="list__lines">
                        @{
                            System.Globalization.CultureInfo russianCulture = new System.Globalization.CultureInfo("ru-RU");
                            DateTime localDateCreate = owner.DateCreate.ToLocalTime();
                            string dayOfWeek = localDateCreate.ToString("dddd", russianCulture);
                            string time = localDateCreate.ToString("HH:mm", russianCulture);
                            dayOfWeek = char.ToUpper(dayOfWeek[0]) + dayOfWeek.Substring(1);
                            string formattedDate = localDateCreate.ToString("dd/MM/yyyy", russianCulture);
                        }
                        <p class="number">@dayOfWeek<br /><br />@formattedDate</p>
                        <p class="name">@owner.Name</p>
                        <p class="phone">@owner.PhoneNumber</p>
                        @foreach (var pet in owner.Pets)
                        {
                            <p class="nick">@pet.Name</p>
                            <p class="chip">@pet.ChipNumber</p>
                            <p class="age">@pet.Age</p>
                            <p class="breed">@pet.Breed</p>
                        }
                        <div class="list__param">
                            <button class="list__more" @onclick="()=>GetClientById(owner.Id)">Клиент</button>
                            <button class="list__more" @onclick="() => UpdateMedcard(owner.Id)">Изменить</button>
                            <button type="submit" class="list__remove" @onclick="() => DeleteMedcard(owner.Id)">Удалить</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}

<footer><br /></footer>

@code{

    private IReadOnlyCollection<OwnerModel> medcardList { get; set; } = null;

    private MedcardViewModel medcardFormModel { get; set; } = new();

    private string Search { get; set; }

    private string ErrorInput { get; set; } = "Карточек";

    protected override async Task OnInitializedAsync()
    {
        
        if (isSearch)
        {
            medcardList = await MedcardSearch.GetAllFromSearchAsync(Search);
        }
        await Task.Delay(1000);
        await LoadMedcardList();
      

    }

    private async Task DeleteMedcard(Guid Id)
    {
        await MedcardContextService.DeleteAsync(Id);

        if (Id != Guid.Empty)
        {
            await LoadMedcardList();
        }
    }

    private void GetClientById(Guid Id)
    {
        NavigationManager.NavigateTo($"/Client/{Id}");
    }

    private async Task LoadMedcardList()
    {
        isSearch = false;
        medcardList = await httpClient.GetFromJsonAsync<IReadOnlyCollection<OwnerModel>>("https://localhost:7211/api/get");
        StateHasChanged();
    }

    private async Task UpdateMedcard(Guid id)
    {
        isEdit = true;
        OpenPopup();

        // Получаем данные через GET, а не POST
        var existingOwners = await httpClient.GetFromJsonAsync<IReadOnlyCollection<OwnerModel>>("https://localhost:7211/api/get");

        // Находим владельца с нужным ID
        var existingOwner = existingOwners?.FirstOrDefault(o => o.Id == id);

        if (existingOwner != null)
        {
            medcardFormModel.Id = existingOwner.Id;
            medcardFormModel.OwnerName = existingOwner.Name;
            medcardFormModel.PhoneNumber = existingOwner.PhoneNumber;

            // Допустим, вы хотите взять первого питомца (если их несколько)
            var pet = existingOwner.Pets.FirstOrDefault();
            if (pet != null)
            {
                medcardFormModel.PetName = pet.Name;
                medcardFormModel.ChipNumber = pet.ChipNumber;
                medcardFormModel.Age = pet.Age;
                medcardFormModel.Breed = pet.Breed;
            }
        }
        else
        {
            // Обработка случая, если владелец не найден
            Console.WriteLine($"Owner with ID {id} not found.");
        }
    }


    //Popup 
    bool ShowPopup = false;
    bool isEdit = false;
    bool isSearch = false;

    void ClosePopup()
    {
        ShowPopup = false;
        isEdit = false;
        medcardFormModel = new();
        StateHasChanged();
    }

    void OpenPopup()
    {
        ShowPopup = true;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {

        if (isEdit)
        {
            await MedcardContextService.UpdateAsync(medcardFormModel.Id, medcardFormModel);
        }
        else
        {
            await MedcardContextService.CreateAsync(medcardFormModel);
        }
        await LoadMedcardList();
        ClosePopup();
    }


    private async Task SearchMedcardsAsync(string search)
    {
        isSearch = true;
        medcardList = await MedcardSearch.GetAllFromSearchAsync(search);
        if (medcardList.Count == 0)
        {
            isSearch = false;
            NavigationManager.NavigateTo("/");

        }

        ErrorInput = $"{search}";


        StateHasChanged();

    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        Search= e.Value.ToString();
        SearchMedcardsAsync(Search);
    }


}
