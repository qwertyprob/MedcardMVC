@page "/"
@layout Layout.MainLayout
@inject IMedcardService medcardContextService
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<header class="header" id="header">
    <div class="logo">
        <a href="/">
            <img src="/img/logo.png" alt="VetAsist">
        </a>
    </div>
    <div class="logo-string">
        <img src="/img/string.png" alt="VetAsist">
    </div>
   
    <button id="Add" type="button" class="btn-input" @onclick="OpenPopup">Добавить</button>
</header>

@if(ShowPopup){

    <EditForm Model="@medcardFormModel" OnValidSubmit="@HandleSubmit">
        <div id="popup" class="popup">
            <div class="popup__box">
                <div class="d-flex position-absolute top-0 end-0 p-3 ">
                    <button type="button" class="btn-close ms-auto w-50 h-auto" aria-label="Close" style="transform: scale(1.5);" @onclick="ClosePopup" ></button>
                </div>
                <br />
                <input placeholder="ФИО" type="text" id="name" @bind="@medcardFormModel.OwnerName"/>
                <input placeholder="Номер телефона" type="text" id="phonenumber" @bind="@medcardFormModel.PhoneNumber" />
                <input placeholder="Кличка" type="text" id="nick" @bind="@medcardFormModel.PetName" />
                <input placeholder="Номер чипа" type="text" id="chip" @bind="@medcardFormModel.ChipNumber" />
                <input placeholder="Возраст" type="text" id="age" @bind="@medcardFormModel.Age" />
                <input placeholder="Порода" type="text" id="breed" @bind="@medcardFormModel.Breed" />

                <button class="list__send" type="submit">Отправить</button>
            </div>
        </div>
    </EditForm>
}

<div class="search">
    <div class="search__box search-border">
        <input placeholder="Поиск" class="search__field__input search-border" type="search" id="search" />
        <button class="search__field__btn search-border" type="button" >Найти</button>
    </div>
</div>

@if (medcardList == null)
{
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}
else if (medcardList.Count == 0)
{
    <h1 style="text-align: center; font-size: 8em; padding: 125px;">
        Карточек не найдено..
    </h1>
}
 else
{
    <section class="list">
        <div class="list__wrapper shadow">
            <div class="list__line-title">
                <p class="number">Дата</p>
                <p class="name">ФИО</p>
                <p class="phone">Телефон</p>
                <p class="nick">Кличка</p>
                <p class="chip">Номер чипа</p>
                <p class="age">Возраст</p>
                <p class="breed">Порода</p>
                <p class="heal" id="no-border">Параметры</p>
            </div>
            @foreach (var owner in medcardList)
            {
                <div class="list__container">
                    <div class="list__lines">
                        @{
                            System.Globalization.CultureInfo russianCulture = new System.Globalization.CultureInfo("ru-RU");
                            DateTime localDateCreate = owner.DateCreate.ToLocalTime();
                            string dayOfWeek = localDateCreate.ToString("dddd", russianCulture);
                            string time = localDateCreate.ToString("HH:mm", russianCulture);
                            dayOfWeek = char.ToUpper(dayOfWeek[0]) + dayOfWeek.Substring(1);
                            string formattedDate = localDateCreate.ToString("dd/MM/yyyy", russianCulture);
                        }

                        <p class="number">@dayOfWeek<br /><br />@formattedDate</p>
                        <p class="name">@owner.Name</p>
                        <p class="phone">@owner.PhoneNumber</p>
                        @foreach (var pet in owner.Pets)
                        {
                            <p class="nick">@pet.Name</p>
                            <p class="chip">@pet.ChipNumber</p>
                            <p class="age">@pet.Age</p>
                            <p class="breed">@pet.Breed</p>
                        }
                        <div class="list__param">
                            <button class="list__more" @onclick="()=>GetClientById(owner.Id)">Подробнее </button>
                            <a href="" class="list__more">Изменить</a>
                            <button type="submit" class="list__remove" @onclick="() => DeleteMedcard(owner.Id)">Удалить</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}


@code {

    //Medcard 
    private IReadOnlyCollection<OwnerModel> medcardList { get; set; } = null;

    [SupplyParameterFromForm]
    private MedcardViewModel medcardFormModel { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {        
        await Task.Delay(1000);
        await LoadMedcardList();

    }
    private async Task DeleteMedcard(Guid Id)
    {
        await medcardContextService.DeleteAsync(Id);

        if(Id == Guid.Empty)
        {
            Id = medcardList.Select(x => x.Id).FirstOrDefault();
        }
        await LoadMedcardList();
        StateHasChanged();
    }

    private void GetClientById(Guid Id)
    {

         NavigationManager.NavigateTo($"/Client/{Id}"); 
    }

    private async Task LoadMedcardList()
    {
        medcardList = await medcardContextService.GetAllAsync();
        StateHasChanged(); 
    }


    //Popup 

    bool ShowPopup = false; 


    void ClosePopup()
    {
        ShowPopup = false;
        StateHasChanged();
    }


    void OpenPopup()
    {

        ShowPopup = true;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {

        await medcardContextService.CreateAsync(medcardFormModel);
        await LoadMedcardList();

        medcardFormModel = new MedcardViewModel();

        ClosePopup();

    }

    



}
