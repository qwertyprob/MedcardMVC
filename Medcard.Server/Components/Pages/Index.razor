@page "/"
@using Medcard.DbAccessLayer.Interfaces
@layout Layout.MainLayout
@inject IMedcardRepository<OwnerDto> repo
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [StreamRendering(true)]

<header class="header" id="header">
    <div class="logo">
        <a href="/">
            <img src="/img/logo.png" alt="VetAsist">
        </a>
    </div>
    <div class="logo-string">
        <img src="/img/string.png" alt="VetAsist">
    </div>
   
    <button id="Add" type="button" class="btn-input" @onclick="OpenPopup">Добавить</button>
</header>

<PopupComponent OnPopupClosed="UpdateMedcardList"></PopupComponent>

<div class="search">
    <div class="search__box search-border">
        <input placeholder="Поиск" class="search__field__input search-border" type="search" id="search" />
        <button class="search__field__btn search-border" type="button">Найти</button>
    </div>
</div>

@if (medcardList == null)
{
    <div class="loader-container">
        <div class="loader"></div>
    </div>
}
else if (medcardList.Count == 0)
{
    <h1 style="text-align: center; font-size: 8em; padding: 125px;">
        Карточек не найдено..
    </h1>
}
else
{
    <section class="list">
        <div class="list__wrapper shadow">
            <div class="list__line-title">
                <p class="number">Дата</p>
                <p class="name">ФИО</p>
                <p class="phone">Телефон</p>
                <p class="nick">Кличка</p>
                <p class="chip">Номер чипа</p>
                <p class="age">Возраст</p>
                <p class="breed">Порода</p>
                <p class="heal" id="no-border">Параметры</p>
            </div>
            @foreach (var owner in medcardList)
            {
                <div class="list__container">
                    <div class="list__lines">
                        @{
                            System.Globalization.CultureInfo russianCulture = new System.Globalization.CultureInfo("ru-RU");
                            DateTime localDateCreate = owner.DateCreate.ToLocalTime();
                            string dayOfWeek = localDateCreate.ToString("dddd", russianCulture);
                            string time = localDateCreate.ToString("HH:mm", russianCulture);
                            dayOfWeek = char.ToUpper(dayOfWeek[0]) + dayOfWeek.Substring(1);
                            string formattedDate = localDateCreate.ToString("dd/MM/yyyy", russianCulture);
                        }

                        <p class="number">@dayOfWeek<br /><br />@formattedDate</p>
                        <p class="name">@owner.Name</p>
                        <p class="phone">@owner.PhoneNumber</p>
                        @foreach (var pet in owner.PetsDtos)
                        {
                            <p class="nick">@pet.Name</p>
                            <p class="chip">@pet.ChipNumber</p>
                            <p class="age">@pet.Age</p>
                            <p class="breed">@pet.Breed</p>
                        }
                        <div class="list__param">
                            <a class="list__more" href="/Client">Подробнее</a>
                            <a href="" class="list__more">Изменить</a>
                            <form asp-action="Delete" asp-controller="Medcard" method="post" class="list__remove">
                                <input type="hidden" name="id" value="@owner.Id" />
                                <button type="submit" onclick="alert('Вы уверены?')"
                                        style="background: none; border: none; color: white; cursor:pointer">
                                    Удалить
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    </section>
}

@code {
    private IReadOnlyCollection<OwnerDto> medcardList { get; set; } = null;
    private OwnerDto medcardAdd { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(1000);
            medcardList = await repo.GetAllAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }


    async Task UpdateMedcardList()
    {
        medcardList = await repo.GetAllAsync();
        StateHasChanged();
    }


    void OpenPopup()
    {
        JSRuntime.InvokeVoidAsync("openPopup");
        StateHasChanged();
    }

    async Task ReloadPage()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }


}
