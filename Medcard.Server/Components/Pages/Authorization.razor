@page "/login"


@layout AuthLayout
@inject ILocalStorageService localStorage
@inject NavigationManager nav
@inject IAuthService auth
@inject IJwtProvider jwt

@rendermode InteractiveServer

<div class="container" style="margin-top: 200px;">
    <div class="row justify-content-center align-items-center">
        <div class="col-sm-12 d-flex justify-content-center align-items-center">
            <h1 class="text-center text-white" style="font-weight: bold; font-size: 3em; margin:30px 20px 30px;">MedvetAssist</h1>
        </div>
    </div>
</div>

<form method="post" @onsubmit="HandleLogin">
    <div class="container" style="margin-top: 50px;">
        <div class="row">
            <div class="col-12 d-flex justify-content-center align-items-center">
                <div class="input-icon">
                    <i class="bi bi-person"></i>
                    <input name="Email" class="form-control custom-input" id="exampleFormControlInput1" placeholder="Email address" autocomplete="on" @bind="model.Email" />
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 d-flex justify-content-center align-items-center">
                <div class="input-icon d-flex justify-content-center align-items-center">
                    <i class="bi bi-lock"></i>
                    <input name="Password" class="form-control custom-input" id="exampleFormControlInput2" placeholder="Password" type="password" autocomplete="off" @bind="model.Password" />
                </div>
            </div>
        </div>
    </div>

    <div class="container text-center mt-4">
        <div class="row justify-content-center">
            <div class="col-auto w-100">
                <button type="submit" class="btn btn-sign">Login</button>
            </div>
        </div>
    </div>
</form>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>

@code {

    [Inject] IHttpContextAccessor context { get; set; }
    private LoginViewModel model = new LoginViewModel();


    async Task HandleLogin()
    {
        var user = auth.Login(model.Email, model.Password);
        if (user != null)
        {
            Console.WriteLine($"{model.Email} dasdasd {model.Password}");
            var token = jwt.GenerateToken(user);
            // Добавляем токен в куки перед редиректом
            var response = context.HttpContext.Response;
            response.Cookies.Append("authToken", token, new CookieOptions { HttpOnly = true, Secure = true });

         
            await localStorage.SetItemAsync("authToken", token);
        
            Console.WriteLine("User authenticated! Token: " + token);
        }
        else
        {
            Console.WriteLine("Invalid credentials.");
        }
    }
}
